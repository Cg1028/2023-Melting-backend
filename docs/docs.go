// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "hazardous waste \u0026 Cg1028",
            "email": "3557695455@qq.com 2194028175@qq.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/newproject": {
            "post": {
                "description": "Create user's project(login required)",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "object",
                        "description": "operating project",
                        "name": "newproject",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            }
        },
        "/api/v1/project": {
            "get": {
                "description": "Get a project with its id",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the project",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.ProposalInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Update user's project(login required)",
                "produces": [
                    "application/json"
                ],
                "summary": "Update one's project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the project",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "object",
                        "description": "operating project",
                        "name": "newproject",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            }
        },
        "/api/v1/project/template": {
            "get": {
                "description": "Get a template with its id",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a templte",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the template",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Template"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "description": "Get User's info with its userID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get User's info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            },
            "post": {
                "description": "upload sth with its UserID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manipulate"
                ],
                "summary": "upload profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/myproject": {
            "get": {
                "description": "Get all the projects from user(login required)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dev"
                ],
                "summary": "Get one's projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.ProposalInfo"
                        }
                    }
                }
            }
        },
        "/api/v1/users/photo": {
            "post": {
                "description": "upload photo with its UserID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manipulate"
                ],
                "summary": "upload photo",
                "parameters": [
                    {
                        "type": "object",
                        "description": "the photo of the user",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "login and return id\u0026token",
                "produces": [
                    "application/json"
                ],
                "summary": "native login",
                "parameters": [
                    {
                        "type": "object",
                        "description": "the User who is logining",
                        "name": "loginAuth",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id\u0026token",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "create a new account with someway",
                "produces": [
                    "application/json"
                ],
                "summary": "register account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the type of the register",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "description": "register data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "db.ProposalInfo": {
            "type": "object",
            "properties": {
                "aim": {
                    "description": "活动目的",
                    "type": "string"
                },
                "budget": {
                    "description": "活动预算",
                    "type": "string"
                },
                "department": {
                    "description": "部门",
                    "type": "string"
                },
                "game": {
                    "description": "游戏项目",
                    "type": "string"
                },
                "info_id": {
                    "description": "活动序号",
                    "type": "integer"
                },
                "name": {
                    "description": "活动",
                    "type": "string"
                },
                "nodes": {
                    "description": "项目环节",
                    "type": "string"
                },
                "optional_tables": {
                    "description": "可选标签",
                    "type": "string"
                },
                "place": {
                    "description": "活动位置",
                    "type": "string"
                },
                "time": {
                    "description": "活动时间",
                    "type": "string"
                },
                "uid": {
                    "type": "integer"
                }
            }
        },
        "db.Template": {
            "type": "object",
            "properties": {
                "context": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "temid": {
                    "type": "integer"
                }
            }
        },
        "db.User": {
            "type": "object",
            "properties": {
                "auth": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "muxipass": {
                    "type": "integer"
                },
                "nick_name": {
                    "description": "最多七个汉字",
                    "type": "string"
                },
                "photo": {
                    "description": "头像",
                    "type": "string"
                },
                "position": {
                    "description": "职位",
                    "type": "string"
                },
                "qq": {
                    "type": "integer"
                },
                "studentid": {
                    "type": "integer"
                },
                "tag": {
                    "description": "标签",
                    "type": "string"
                },
                "uid": {
                    "description": "序号",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{"http"},
	Title:            "Melting API",
	Description:      "Backend system of Muxi_Melting",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
